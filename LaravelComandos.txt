Novo projeto:
Cria uma pasta do projeto(com o nome do projeto)
composer create-project --prefer-dist laravel/laravel nome-do-projeto
ou colocando a versão:
composer create-project --prefer-dist laravel/laravel=8.28.1 nome-do-projeto

o "Composer" instala pacotes php e o "npm" instala pacores javascript.

rm -rf nomeDoDiretorio (apaga mesmo com dados)

Start no servidor web interno do artisan e abre uma porta no localhost(porta 8000):
http://127.0.0.1/8000:
ctrl+C (stop este servidor):
php artisan serve

Versão do framework Laravel:
php artisan -V

Comandos da ferramenta artisan(assistente de console):
php artisan
php artisan list
php artisan help

Consultar sobre um comando:
php artisan help 'nome-do-comando'

Gerar uma nova chave de criptografia para esta aplicação
php artisan key:generate

shift alt seta-pra-cima = duplica um texto selecionado

Criando um outro projeto local que vai usar o mesmo repositorio:
Na primeira vêz(Repositorio novo)
git init
git config --global user.name luizmarcello
git config --global user.email luizmarcello.vmo@hotmail.com
git clone https://github.com/LuizMarcello/maisumnovoprojeto.git nome-da-pasta-local-que-vai-ser-o
ou
git clone --branch main https://github.com/LuizMarcello/maisumnovoprojeto.git nome-da-pasta-local-que-vai-ser-o
ou
git clone https://github.com/laravel/laravel.git nome-da-pasta-local-que-será-o-projeto
(Um repositorio do projeto completo(virgem) para ser clonado, para criar um projeto laravel manualmente)
Depois, na pasta do projeto:
composer install
copy .env.example .env
php artisan key:generate
php artisan serve

Criando um novo model:
php artisan make:model Contato
Ou já faz a migration também:
php artisan make:model Contato --migration
ou:
php artisan make:model Contato -m
(Cria juntos o Model e a Migratiom)

Pacotes:
Ex: Criando o modelo "loja", mas dentro do pacote "Core".
php artisan make:model Core/loja

Já criando o modelo(model), o controller("resource"=já com métodos padrões) e as migrations simultâneamente:
php artisan make:model --migration --controller --resource Marca
ou:
php artisan make:model -mcr Marca
ou:
Criam o "Model", o "controlador" com o resource, as "migrations", o "seeder" e o "factory"
php artisan make:model --all Marca
ou ainda:
php artisan make:model -a Marca

Criar um novo controler:
php artisan make:controller ContatoController
Ex: Criando o controller "LojaController", mas dentro do pacote "Core".
php artisan make:controller Core/LojaController
ou:
php artisan make:controller ContatoController --resource
Já cria o controller com os ações(métodos) para criar, atualizar, 
listar, mostrar e deletar os itens. 
ou:
php artisan make:controller Core/LojaController --api
Já cria o controller com os métodos para uma api:
index, store, show, update e destroy.

Crianmdo uma nova migration(tabela) no laravel:
php artisan make:migration create_products_table
OU:
Para criar o Model e também a migration(tabela), como acima:)
php artisan make:model Product -m
NOTA: Existe uma convenção para o nome dos arquivos de migration, os
nomes compostos devem ser separados por “_”, devem começar com create
e terminar com table (Exemplo: create_password_resets_table)

Validação de formulário com FormRequest:
php artisan make:request CLientRequest
É criada uma pasta chamda "Requests" em App/Http
Dentro da pasta "Requests" é criada a classe CLientRequest.php,
que herda da classe FormRequest.
Depois tem que alterar classe "Request" injetada no parâmetro do
método "salvar" ou "editar" no Controller, para a classe "ClientRequest".
As regras são inseridas no método "rules()" dessa classe criada.(TreinaWeb)

Nas views(xxx.blade.php):
{{ $variaveis }} Usar variáveis php dentro do html
Começando com "@" são funções do blade, dentro do php
@end + "nome-da-função" - para fechar

shift alt seta-pra-cima = duplica um texto selecionado

Blade é um sistema de templates do laravel, para facilitar.

Migration: Versionamento do banco de dados.
           Modela o banco de dados usando o PHP.
	   
Criando somente uma migration nova:
php artisan make:migration siteContatos

Criando uma migration e uma nova tabela chamada "produtos":
php artisan make:migration create_produtos_table --create=produtos

Migration para acrescentar um atributo para a tabela especificada
php artisan make:migration add_votes_to_produtos_table --table=produtos

Rodar todas as migrations(tabelas) pendentes:
php artisan migrate

Exemplo de aumentar mais uma coluna na tabela 'clientes' que já existe:
php artisan make:migration alter_clientes_table
Depois edita a migration criada:
Método Up:
Schema::table('clientes', function (Blueprint $table) {
            $table->string('photo', 200);
        });
Método Down:
Schema::table('clientes', function (Blueprint $table) {
            $table->dropColumn('photo');
        });
	
Exemplo para nova coluna da tabela referenciar chaves estrangeiras:
Método Up:
Schema::table('clientes', function (Blueprint $table) {
           $table->integer('user_id')->unsigned();
           $table->foreign('user_id')->references('id')->on('users');
       });
       
 ou assim:
 
 Método Up:
 Schema::table('clientes', function (Blueprint $table) {
            $table->unsignedBigInteger('user_id')->nullable();
            $table->foreign('user_id')->references('id')->on('users');
});

Método Down:
Schema::table('clientes', function (Blueprint $table) {
           $table->dropColumn('user_id');
       });
       
Fica assim: 
Criando uma nova coluna na tabela "clientes" chamada "user_id"(padrão que o
láravel usa para chaves estrangeiras: o nome da tabela underline o nome da chave
primária desta tabela) 
(Unsigned:Não aceita valores negativos)
E esta nova coluna referenciará o "id" primário da tabela "users".

e rodas as migrations:
php artisan migrate

Obs: Comando "php artisan migrate" executa o método up() da migration.
     Comando "php artisan migrate:rollback" executa o método down() da migration, reverte as migrações.
     
        php artisan migrate
        Da mais antiga para a amais atual

        php artisan migrate:rollback
        Da mais atual para a mais antiga

Ex: php artisan migra
    Mostra todos os comandos do migrate

Desfaz o ultimo migrate para o banco de dados,
nesse caso, vai apagar a tabela no bd.
php artisan migrate:rollback

Reseta/rollback/apaga todas as tabelas:
php artisan migrate:reset

Para acessar o banco de dados(eloquent):
Orientação a objetos no prompt:
php artisan tinker
$contato = new App\Contato();
App\Contato::all();
$contato->nome = "Guilherme";
$contato->telefone = "900203883";
$contato->email = "luizmarcello.vmo@hotmail.com";
$contato->save();
App\Contato::all();
Para deletar um usuario:
$con = App\Contato::find(id);
$con->delete();

Ciclo para criar um crud no laravel:
Cria o modelo solicitando a migration
php artisan make:model Curso -m

Configura a migration e depois faz a migration:
php artisan migrate

Depois define os controlers:
php artisan make:controller Admin\CursoController

Depois as rotas:
No arquivo routes\web.php

Depois define as views(html):
Configuração dos "Controllers" junto com as configurações das "views"

Nas view(xxx.blade.php):
Exemplo usando o "helper de imagens asset()":
Localiza automaticamente a pasta de imagens do projeto(caminho da pasta public)
<td><img width="90" src="{{asset($registro->imagem)}}" alt="{{ $registros->titulo }"></td>

Exemplo usando o "helper de rotas "route()":
<form class="" action="{{route('admin.cursos.salvar')}}" method="post">

Nas view(xxx.blade.php):
Colocando um token:
{{ csrf_field() }}

Roda todas as seeders criadas:
php artisan db:seed

Roda apenas a seed especificada na class:
php artisan db:seed --class=UsuarioSeeder

Ativar o sistema de login do laravel:
php artisan make:auth (deprecated)
Atualizado:
composer require laravel/ui
php artisan ui:auth

Para não ser interpretado como uma marcação do blade,
colocar uma arroba na frente:
@{{ cliente }}

Para usar "Controllers" no laravel 8.xx:
Descomentar a linha 29:
**protected $namespace = 'App\\Http\\Controllers';**
no arquivo 'app\Providers\RouteServiceProvider.php'.

Criar um "resource controller" no laravel:
php artisan make:controller ClientController --resource
No controller já cria as actions:
index, create, store, show, edit, update, destroy

Listar todas as rotas criadas no sistema:
php artisan route:list

Para fazer link simbólico no laravel(Igual no linux):
php artisan storage:link
Faz um link simbólico da pasta "public" normal, com a
pasta "public" do storage.Quando faz um upload de arquivo,
normalmente vai para a pasta "public" do storage. Com
este link, agora se tem acesso normal aos arquivos que subiram.

Regras de validação:
#mensagens customizadas
	  $mensagens = array(
			'required' =>  "O campo :attribute é obrigatório",
			'email' =>  "Digite um e-mail válido",
			'url' =>  "Digite uma url válida",
			'alpha_num' =>  "O usuário deve conter somente letras e números",
			'username.min'  => "O usuário deve conter no mínimo três dígitos",
			'password.min'  => "A senha deve conter no mínimo seis dígitos",
			'same'  => "O valor de confirmação deve ser o mesmo da senha"
		);
		#criando regra de validação
		$rules = array(
			'nome'          => 'required',
			'username'      	=> 'required|alpha_num|min:3',
			'email'         => 'required|email',
			'site'		    => 'required|url',
			'password'			=> 'required|min:6',
			'password-repeat'	=> 'required|same:password'
		);

		$validator = Validator::make(Input::all(), $rules, $mensagens);
		
		php artisan down - Colocar a aplicação em mode de manutenção
		php artisan up - Tirar do modo de manutenção
		php artisan env - apresenta o ambiente de desenvolvimento que está sendo utilizado.
		php artisan optimize - realiza o cast no Framework para que o Laravel tenha sua melhor performance.
		php artisan help - lista todas as ajudas para o Framework
		php artisan tinker - Permite a interação com a aplicação, exemplo a inserção de dados nas tabelas do banco de dados.
		php artisan route:cache : cria um arquivo de rota cache de registro rápido
		php artisan route:clear : remove o arquivo de rota do cache
		php artisan route:list : apresenta todas as rotas registradas na aplicação
		php artisan config:cache - Para armazenar em cache todos os seus arquivos de configuração em um único arquivo.
		
		php artisan view:clear - Limpando as views compiladas do cache
		
		php artisan migrate:status
		Mostra as migrations que já foram executadas.
		
		php artisan migrate:reset
		Reverte todas as migrações do banco de dados.
		Da migração mais atual para a a mais antiga.
		Banco volta ao estado natural, antes de qualquer migration.
		Executa o rollback de todas as migrations.
		
		php artisan migrate:refresh
		Somente re-cria o banco de dados. Reverte todas as migrações, como o comando anterior,
		e depois já executao o "migrate" novamente. Se haviam informações, serão zeradas.
		Executa o rollback de todas as migrations e + o migrate para recriar os objetos no banco.
		
		php artisan migrate:fresh
		Faz um "Drop" de todos os objetos do banco e + o migrate para recriar os objetos no banco,
		baseado no método "up" das mesmas.
		
		
		
		Para funcionar a paginação do "bootstrap" no laravel, ao invés da paginação defult original, a partir da versão
		8.x do laravel, a "Tailwind":
		No arquivo App\Providers\AppServiceProvider.php:
		
<?php

namespace App\Providers;


/* use Illuminate\Contracts\Pagination\Paginator; /*Comentada esta linha*/
use Illuminate\Support\ServiceProvider;
use Illuminate\Pagination\Paginator;  /*Acrescentada esta linha*/

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
    }

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {   
        Paginator::useBootstrap();   /*Acrescentada esta linha*/
    }
}

As configurações para as mascaras, são feitas no arquivo:
resources/js/bootstrap.js
Tbém o arquivo Resources/js/mascaras.js
Antes baixar o plugin desejado para a pasta resources/adminLTE/plugins

O comando "npm run dev" roda o "laravel mix", que acresceta novos pacotes,
sempre voltado a faciliar o front-end, tipo javascrip, jQuery. 

O comando "composer dump-autoload" é para recarregar o autoload do arquivo 
composer.json, quando configuramos ele.	

Para remover algo instalado com o composer:
composer remove vendor/package
exemplo: composer remove redis/redis

PHP DocBlocker - Extensão do vscode para automatizar comentários.

PHP namespace Resolver - Extensão vscode para automatizar importação de classes.

php artisan route:cache - Para atualizar as rotas com o arquivo web.php
(php artisan route:list)

Deployer:
Instalar o deployer em modo desenvolvimento somente, para cada projeto(Dentro da pasta do projeto):
Em produção não vai instalar.
composer require deployer/deployer --dev

.\vendor\bin\dep init - Para iniciar o arquivo de configuração do deploy

Caso precisar criar um novo projeto local, para jogar no github:
-Criar projeto novo no github
-Na pasta local do projeto:
 -git init - Para criar o repositorio git dentro da pasta raíz do projeto.
 -git add . - Para adicionar todos os arquivos do projeto dentro do repositório git.
 -git commit -m "criar o primeiro commit"
 -git branch -M main - Criando um branch chamado "main"
 -git remote add origin https://link copiado do novo projeto remoto no git hub - enviar o projeto para o novo repositorio remoto
 -git push -u origin main - Por fim, anviar este commit para o repositório remoto
  
 Comando que finalmente deu certo para instalar o "composer" no homehost:
 /usr/local/bin/ea-php73 -c /home/bentleyw/controlebentleyweb/php.ini -d allow_url_fopen=On installer
 
 Comandos para dar previlégios a todas pastas e arquivos no projeto:
 find * -type d -exec chmod 755 {} \;  (pastas) -dentro da pasta do projeto
 find * -type f -exec chmod 644 {} \;  (arquivos) -dentro da pasta do projeto
 chmod 755 controlebentleyweb  -fora da pasta do projeto
 
 Criando o middleware "CheckTasks":
 php artisan make:middleware CkeckTasks
 
 Autenticação e autorização:
 Controller para controles/verificações/mensagens sobre usuários logados:
 HomeController.php (No método index() ):
 // Retornando uma instância do model do usuário logado:
    /* dd(Auth::user()->name); */
    /* dd(Auth::id()); */

    /* Verificação se tem usuário logado */
    /* if(Auth::check()) {
        echo 'tem logado';
    } else {
        echo 'Não tem logado';
    } */

        Auth::user();

      /* Método para login via código, pelo id do usuário: */
        /* Auth::loginUsingId(1); */

      /* Método para logout via código: */
       /*  Auth::logout(); */
       
       No provider app\Providers\AuthServiceProvider.php, no método
       boot(), são colocados os "gates" de permissões/autorização:
       Exemplo no projeto:
        /* update-client: Nome do gate/
        /* $user: Variável que receberá do láravel uma instância do usuário */
        /* $client: Variável que receberá do láravel uma instância do model "cliente" */
        /* Se for igual, retorna true e o usuário tem permissão */
        Gate::define('update-client', function($user, $client) {
            return $user->id == $client->user_id;
        });
	
	 {{-- can(): Diretiva do blade que verifica se tem permissão ou não --}}
         {{-- Parâmetros: Nome do gate e instância do cliente, ao qual terá ou não permissão. --}}
              @can('update-client',  $cliente)
	      @endcan
	 Neste caso, usada na view index.blade.php para esconder os botões de editar e deletar
	
	No controller do referido resource, no método desejado (update,edit,destroy,etc)
	/* Para permissão/autorização do "update()" deste controller. */
        /* Parâmetros: Nome do gate e instância do model */
        $this->authorize('update-client', $cliente);
	Daí, além dos botões que não aparecem, também não consegue permissão nem pela url.
	
	JWT(Jason Web Token):
	Instalando via composer. Baixa todas as dependências:
	-composer require tymon/jwt-auth
	Adicionando o service provider no config/app.php:
	(Acrescenta esta linha no providers):
	-Tymon\JWTAuth\Providers\LaravelServiceProvider::class,
	Comando para publicar o package config file:
	-php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
	Será criado o config/jwt.php, para configurações.
	Comando para gerar uma chave no .env:
	(JWT_SECRET=xxxxxxxxxx)
	-php artisan jwt:secret
	Criar o model "User" (melhor num pacote separado):
	-php artisan make:model Access/User
	E configurar o mesmo como o curso udemy: Criando REST api com laravel 8.
	
	shift alt seta-pra-cima = duplica um texto selecionado
	
	Vue.JS no projeto laravel:
	Iniciar o projeto laravel normalmente:
	composer create-project....
	
	Instalar o pacote UI:
	composer require laravel/ui:^3.2.1
	ou
	composer require laravel/ui
	
	Gerar o esqueleto do projeto com Vue.JS e autenticação web nativa (scaffold/esqueleto)
	// Generate basic scaffolding...
        php artisan ui vue  (vue.js)
        
	// Generate login / registration scaffolding...
        php artisan ui vue --auth
        
	baixar as dependências de front-end
	npm install
	
	Produzindo o bundle de front-end
	npm run dev
	
	Se der este êrro: Error: Cannot find module 'webpack/lib/rules/DescriptionDataMatcherRulePlugin'
                          Require stack:....
			  npm i vue-loader - Obs: Este resolveu mesmo.
			  
	Obs: Se der êrro neste ultimo, executar este comando:
	      npm install vue-loader@^15.9.5 --save-dev --legacy-peer-deps
       
               Possibilidades para passar parâmetros do controlador para uma view(blade):
              -Array associativo:
              -Método "Compact()", nativo do php, que tbém cria um array
               associativo, baseado em parâmetros.
              -"With()"

Helper "asset()" do laravel:
Modo relativo(normal) não é muito bom.
Para incluir "assets" nas views, melhor usar o helper "assets()".
Usará uma string com a referência da imagem
Ele olhará sempre para a pasta "public" do laravel, mas é possível
configurar este caminho.
<img src="img/logo.png"> - modo relativo(normal)
<img src="{{ asset('img/logo.png') }}"> - com o helper "asset()"

Instrução de linha de comando do php: 
"extension_loaded()": Método nativo do php que verifica se uma extensão 
 está carregada, no caso, a extensão do "pdo" para o mySql.
php -r "var_dump(extension_loaded('pdo_mysql'))";

É fundamental que a coluna da tabela que vai receber a chave
estrangeira tenha o mesmo tipo da chave primária, , no caso, "bigint unsigned.
 (unsigned: não aceita valores negativos).
 
 Executa somente a(s) migrations que estiverem neste diretório.
 php artisan migrate --path=/12345678
 
 
 Exemplo de abordagens para estabelecer um relacionamento entre as tabelas motivo_contatos e site_contatos;
 Jorge Sant Ana - Aula 9 - Módulo Trabalhando com formulários.
 
 1ª abordagem:
-Criar fk(foreign key) na coluna motivo_contato apontando para id da tabela motivo_contatos

 2ª abordagem:
-Alterar o nome da coluna para motivo_contato_id e aplicar a fk(foreign key) apontando para a coluna id da tabela motivo_contatos

 3ª abordagem: Mais etapas, para praticar.
-(Criar a coluna motivo_contatos_id),
 (migrar os dados de motivo_contato para motivo_contatos_id),
 (aplicar a fk(foreign key) em motivo_contatos_id apontando para a coluna id da tabela motivo_contatos), e por fim, 
 (remover a coluna motivo_contato).
 
 Diferença: Aspas simples: tem que concatenar string com variável
            Aspas duplas: não precisa concatenar, faz a interpolação de string com variável
	    Exemplos:
            echo 'Remover o registro de ID' . $id; 
            echo "Remover o registro de ID $id";
                    



