Novo projeto:
Cria uma pasta do projeto(com o nome do projeto)
composer create-project --prefer-dist laravel/laravel nome-do-projeto

o "Composer" instala pacotes php e o "npm" instala pacores javascript.

rm -rf nomeDoDiretorio (apaga mesmo com dados)

Start no servidor web interno do artisan e abre uma porta no localhost(porta 8000):
http://127.0.0.1/8000:
ctrl+C (stop este servidor):
php artisan serve

Versão do framework Laravel:
php artisan -V

Comandos da ferramenta artisan(assistente de console):
php artisan
php artisan list
php artisan help

Consultar sobre um comando:
php artisan help 'nome-do-comando'

Gerar uma nova chave de criptografia para esta aplicação
php artisan key:generate

Criando um novo model:
php artisan make:model Contato
Ou já faz a migration também:
php artisan make:model Contato --migration
ou:
php artisan make:model Contato -m
(Cria juntos o Model e a Migratiom)

Criar um novo controler:
php artisan make:controller ContatoController
ou:
php artisan make:controller ContatoController --resource
Já cria o controller com os ações(métodos) para criar, atualizar, 
listar, mostrar e deletar os itens. 

Crianmdo uma nova migration(tabela) no laravel:
php artisan make:migration create_products_table
OU:
Para criar o Model e também a migration(tabela), como acima:)
php artisan make:model Product -m
NOTA: Existe uma convenção para o nome dos arquivos de migration, os
nomes compostos devem ser separados por “_”, devem começar com create
e terminar com table (Exemplo: create_password_resets_table)

Validação de formulário com FormRequest:
php artisan make:request CLientRequest
É criada uma pasta chamda "Requests" em App/Http
Dentro da pasta "Requests" é criada a classe CLientRequest.php,
que herda da classe FormRequest.
Depois tem que alterar classe "Request" injetada no parâmetro do
método "salvar" ou "editar" no Controller, para a classe "ClientRequest".
As regras são inseridas no método "rules()" dessa classe criada.(TreinaWeb)

Nas views(xxx.blade.php):
{{ $variaveis }} Usar variáveis php dentro do html
Começando com "@" são funções do blade, dentro do php
@end + "nome-da-função" - para fechar

Blade é um sistema de templates do laravel, para facilitar.

Migration: Versionamento do banco de dados.
           Modela o banco de dados usando o PHP.
Criando uma migration e uma nova tabela chamada "produtos":
php artisan make:migration create_produtos_table --create=produtos

Migration para acrescentar um atributo para a tabela especificada
php artisan make:migration add_votes_to_produtos_table --table=produtos

Rodar todas as migrations(tabelas) pendentes:
php artisan migrate

Exemplo de aumentar mais uma coluna na tabela 'clients' que já existe:
php artisan make:migration alter_clients_table
Depois edita a migration criada:
Método Up:
Schema::table('clients', function (Blueprint $table) {
            $table->string('photo', 200);
        });
Método Down:
Schema::table('clients', function (Blueprint $table) {
            $table->dropColumn('photo');
        });
e rodas as migrations:
php artisan migrate

Ex: php artisan migra
    Mostra todos os comandos do migrate

Desfaz o ultimo migrate para o banco de dados,
nesse caso, vai apagar a tabela no bd.
php artisan migrate:rollback

Reseta/rollback/apaga todas as tabelas:
php artisan migrate:reset

Para acessar o banco de dados(eloquent):
Orientação a objetos no prompt:
php artisan tinker
$contato = new App\Contato();
App\Contato::all();
$contato->nome = "Guilherme";
$contato->telefone = "900203883";
$contato->email = "luizmarcello.vmo@hotmail.com";
$contato->save();
App\Contato::all();
Para deletar um usuario:
$con = App\Contato::find(id);
$con->delete();

Ciclo para criar um crud no laravel:
Cria o modelo solicitando a migration
php artisan make:model Curso -m

Configura a migration e depois faz a migration:
php artisan migrate

Depois define os controlers:
php artisan make:controller Admin\CursoController

Depois as rotas:
No arquivo routes\web.php

Depois define as views(html):
Configuração dos "Controllers" junto com as configurações das "views"

Nas view(xxx.blade.php):
Exemplo usando o "helper de imagens asset()":
Localiza automaticamente a pasta de imagens do projeto(caminho da pasta public)
<td><img width="90" src="{{asset($registro->imagem)}}" alt="{{ $registros->titulo }"></td>

Exemplo usando o "helper de rotas "route()":
<form class="" action="{{route('admin.cursos.salvar')}}" method="post">

Nas view(xxx.blade.php):
Colocando um token:
{{ csrf_field() }}

Roda todas as seeders criadas:
php artisan db:seed

Roda apenas a seed especificada na class:
php artisan db:seed --class=UsuarioSeeder

Ativar o sistema de login do laravel:
php artisan make:auth (deprecated)
Atualizado:
composer require laravel/ui
php artisan ui:auth

Para não ser interpretado como uma marcação do blade,
colocar uma arroba na frente:
@{{ cliente }}

Para usar "Controllers" no laravel 8.xx:
Descomentar a linha 29:
**protected $namespace = 'App\\Http\\Controllers';**
no arquivo 'app\Providers\RouteServiceProvider.php'.

Criar um "resource controller" no laravel:
php artisan make:controller ClientController --resource
No controller já cria as actions:
index, create, store, show, edit, update, destroy

Listar todas as rotas criadas no sistema:
php artisan route:list

Para fazer link simbólico no laravel(Igual no linux):
php artisan storage:link
Faz um link simbólico da pasta "public" normal, com a
pasta "public" do storage.Quando faz um upload de arquivo,
normalmente vai para a pasta "public" do storage. Com
este link, agora se tem acesso normal aos arquivos que subiram.

Regras de validação:
#mensagens customizadas
	  $mensagens = array(
			'required' =>  "O campo :attribute é obrigatório",
			'email' =>  "Digite um e-mail válido",
			'url' =>  "Digite uma url válida",
			'alpha_num' =>  "O usuário deve conter somente letras e números",
			'username.min'  => "O usuário deve conter no mínimo três dígitos",
			'password.min'  => "A senha deve conter no mínimo seis dígitos",
			'same'  => "O valor de confirmação deve ser o mesmo da senha"
		);
		#criando regra de validação
		$rules = array(
			'nome'          => 'required',
			'username'      	=> 'required|alpha_num|min:3',
			'email'         => 'required|email',
			'site'		    => 'required|url',
			'password'			=> 'required|min:6',
			'password-repeat'	=> 'required|same:password'
		);

		$validator = Validator::make(Input::all(), $rules, $mensagens);
		
		php artisan down - Colocar a aplicação em mode de manutenção
		php artisan up - Tirar do modo de manutenção
		php artisan env - apresenta o ambiente de desenvolvimento que está sendo utilizado.
		php artisan optimize - realiza o cast no Framework para que o Laravel tenha sua melhor performance.
		php artisan help - lista todas as ajudas para o Framework
		php artisan tinker - Permite a interação com a aplicação, exemplo a inserção de dados nas tabelas do banco de dados.
		php artisan route:cache : cria um arquivo de rota cache de registro rápido
		php artisan route:clear : remove o arquivo de rota do cache
		php artisan route:list : apresenta todas as rotas registradas na aplicação
		php artisan config:cache - Para armazenar em cache todos os seus arquivos de configuração em um único arquivo.
		
		Para funcionar a paginação do "bootstrap" no laravel, ao invés da paginação defult original, a partir da versão
		8.x do laravel, a "Tailwind":
		No arquivo App\Providers\AppServiceProvider.php:
		
<?php

namespace App\Providers;


/* use Illuminate\Contracts\Pagination\Paginator; /*Comentada esta linha*/
use Illuminate\Support\ServiceProvider;
use Illuminate\Pagination\Paginator;  /*Acrescentada esta linha*/

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
    }

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {   
        Paginator::useBootstrap();   /*Acrescentada esta linha*/
    }
}

As configurações para as mascaras, são feitas no arquivo:
resources/js/bootstrap.js
Tbém o arquivo Resources/js/mascaras.js
Antes baixar o plugin desejado para a pasta resources/adminLTE/plugins

O comando "npm run dev" roda o "laravel mix", que acresceta novos pacotes,
sempre voltado a faciliar o front-end, tipo javascrip, jQuery. 

O comando "composer dump-autoload" é para recarregar o autoload do arquivo 
composer.json, quando configuramos ele.	

PHP DocBlocker - Extensão do vscode para automatizar comentários.

PHP namespace Resolver - Extensão vscode para automatizar importação de classes.

php artisan route:cache - Para atualizar as rotas com o arquivo web.php
(php artisan route:list)

Deployer:
Instalar o deployer em modo desenvolvimento somente, para cada projeto(Dentro da pasta do projeto):
Em produção não vai instalar.
composer require deployer/deployer --dev

.\vendor\bin\dep init - Para iniciar o arquivo de configuração do deploy

Caso precisar criar um novo projeto local, para jogar no github:
-Criar projeto novo no github
-Na pasta local do projeto:
 -git init - Para criar o repositorio git dentro da pasta raíz do projeto.
 -git add . - Para adicionar todos os arquivos do projeto dentro do repositório git.
 -git commit -m "criar o primeiro commit"
 -git branch -M main - Criando um branch chamado "main"
 -git remote add origin https://link copiado do novo projeto remoto no git hub - enviar o projeto para o novo repositorio remoto
 -git push -u origin main - Por fim, anviar este commit para o repositório remoto
 
 
		



